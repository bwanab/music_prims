#+TITLE: MusicPrims - Music Primatives

This is a collection of music primatives implemented in Elixir.

Definitions:

+ The keys at present are A,A!,B,C,C!...G,G! where the ! represents the sharp sign. No flats. Yes, I know it doesn't make sense but that's where I am with it.

+ Note is a tuple pair {key, octave}.

+ Chord is a tuple pair {key, chord_type}


Examples:

+ major_scale(:C) == [C: 0, D: 0, E: 0, F: 0, G: 0, A: 0, B: 0]
+ minor_scale(:A) == [A: 0, B: 0, C: 1, D: 1, E: 1, F: 1, G: 1]
+ blues_scale(:A) == [A: 0, C: 1, D: 1, D!: 1, E: 1, G: 1]
+ key(:major, 0, :sharps) == :C
+ key(:major, 3, :sharps) == :A
+ key(:major, 3, :flats) == :D!  (obviously should be Eb)
+ next_fifth({:C, 1}) == {:G, 1}
+ next_fifth({:G, 1}) == {:D, 2}
+ chromatic_scale({:C, 0}) |> Enum.take(4) = [C: 0, C!: 0, D: 0, D!: 0]
+ major_chord(:F) == [F: 0, A: 0, C: 1]
+ major_chord(:F) |> first_inversion == [A: 0, C: 1, F: 1]
+ major_seventh_chord(:F) == [F: 0, A: 0, C: 1, E: 1]
+ major_seventh_chord(:F) |> to_midi == [29, 33, 36, 40]
+ chord_syms_to_chords([:I, :IV, :vi, :V], :C) == [{:C, :major}, {:F, :major}, {:A, :minor}, {:G, :major}]
+ chord_syms_to_chords([:I, :IV, :vi, :V], :G) == [G: :major, C: :major, E: :minor, D: :major]
+ Enum.map(chord_syms_to_chords([:I, :IV, :vi, :V], :G), &(chord_to_notes(&1))) == [
     [G: 1, B: 1, D: 2],
     [C: 1, E: 1, G: 1],
     [E: 1, G: 1, B: 1],
     [D: 1, F!: 1, A: 1]
   ]
+ Enum.map(chord_syms_to_chords([:I, :IV, :vi, :V], :G), &(chord_to_notes(&1) |> to_midi |> Enum.map(fn a -> to_string(a) end))) == [["43", "47", "50"], ["36", "40", "43"], ["40", "43", "47"], ["38", "42", "45"]]
